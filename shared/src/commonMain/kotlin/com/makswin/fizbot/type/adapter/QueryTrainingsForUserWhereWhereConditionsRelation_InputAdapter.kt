//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.3.0'.
//
package com.makswin.fizbot.type.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableIntAdapter
import com.apollographql.apollo3.api.Optional
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.optional
import com.makswin.fizbot.type.QueryTrainingsForUserWhereWhereConditionsRelation
import kotlin.IllegalStateException
import kotlin.Unit

public object QueryTrainingsForUserWhereWhereConditionsRelation_InputAdapter :
    Adapter<QueryTrainingsForUserWhereWhereConditionsRelation> {
  public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
      QueryTrainingsForUserWhereWhereConditionsRelation = throw
      IllegalStateException("Input type used in output position")

  public override fun toJson(
    writer: JsonWriter,
    customScalarAdapters: CustomScalarAdapters,
    `value`: QueryTrainingsForUserWhereWhereConditionsRelation,
  ): Unit {
    writer.name("relation")
    StringAdapter.toJson(writer, customScalarAdapters, value.relation)
    if (value.`operator` is Optional.Present) {
      writer.name("operator")
      SQLOperator_ResponseAdapter.nullable().optional().toJson(writer, customScalarAdapters,
          value.`operator`)
    }
    if (value.amount is Optional.Present) {
      writer.name("amount")
      NullableIntAdapter.optional().toJson(writer, customScalarAdapters, value.amount)
    }
    if (value.condition is Optional.Present) {
      writer.name("condition")
      QueryTrainingsForUserWhereWhereConditions_InputAdapter.obj().nullable().optional().toJson(writer,
          customScalarAdapters, value.condition)
    }
  }
}
