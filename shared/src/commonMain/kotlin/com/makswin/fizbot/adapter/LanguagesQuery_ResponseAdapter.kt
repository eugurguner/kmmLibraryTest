//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.3.0'.
//
package com.makswin.fizbot.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.makswin.fizbot.LanguagesQuery
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object LanguagesQuery_ResponseAdapter {
  public object Data : Adapter<LanguagesQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("languages")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        LanguagesQuery.Data {
      var languages: LanguagesQuery.Languages? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> languages = Languages.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return LanguagesQuery.Data(
        languages = languages
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: LanguagesQuery.Data,
    ): Unit {
      writer.name("languages")
      Languages.obj().nullable().toJson(writer, customScalarAdapters, value.languages)
    }
  }

  public object Languages : Adapter<LanguagesQuery.Languages> {
    public val RESPONSE_NAMES: List<String> = listOf("data")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        LanguagesQuery.Languages {
      var `data`: List<LanguagesQuery.Data1>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> `data` = Data1.obj(true).list().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return LanguagesQuery.Languages(
        `data` = `data`!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: LanguagesQuery.Languages,
    ): Unit {
      writer.name("data")
      Data1.obj(true).list().toJson(writer, customScalarAdapters, value.`data`)
    }
  }

  public object Data1 : Adapter<LanguagesQuery.Data1> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        LanguagesQuery.Data1 {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      reader.rewind()
      val fragmentLanguage = com.makswin.fizbot.fragment.FragmentLanguageImpl_ResponseAdapter.FragmentLanguage.fromJson(reader,
          customScalarAdapters)

      return LanguagesQuery.Data1(
        __typename = __typename!!,
        fragmentLanguage = fragmentLanguage
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: LanguagesQuery.Data1,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      com.makswin.fizbot.fragment.FragmentLanguageImpl_ResponseAdapter.FragmentLanguage.toJson(writer,
          customScalarAdapters, value.fragmentLanguage)
    }
  }
}
